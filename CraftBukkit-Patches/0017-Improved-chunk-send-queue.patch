From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andrew Steinborn <git@steinborn.me>
Date: Fri, 23 Aug 2019 00:03:35 -0400
Subject: [PATCH] Improved chunk send queue

CraftBukkit's original chunk send queue sent chunks in an uneven order.
This was most noticeable with the Netty networking stack and async chunk
loading.

Canyon now sends chunks based on their distance to the player, which
provides a smoother load.

diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 328f385fd8c5a65e2c2af0599a04c54627b98fcc..f5aebd3eb90ca40089c7372640376e1c437941ce 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -1,8 +1,6 @@
 package net.minecraft.server;
 
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 
 // CraftBukkit start
 import org.bukkit.Bukkit;
@@ -20,7 +18,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public ItemInWorldManager itemInWorldManager;
     public double d;
     public double e;
-    public List chunkCoordIntPairQueue = new LinkedList();
+    private Queue<ChunkCoordIntPair> chunkSendQueue = new LinkedList<>(); // Canyon
+    public List chunkCoordIntPairQueue = (List) chunkSendQueue; // Canyon
+    private final java.util.concurrent.Semaphore chunkSendSemaphore = new java.util.concurrent.Semaphore(com.canyonmodded.config.CanyonConfig.maxOutstandingChunks);
+    // Canyon end
     public Set playerChunkCoordIntPairs = new HashSet();
     private int bL = -99999999;
     private int bM = 60;
@@ -206,7 +207,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         }
 
         if (flag && !this.chunkCoordIntPairQueue.isEmpty()) {
-            ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) this.chunkCoordIntPairQueue.get(0);
+            // Canyon start - rewrote logic and moved elsewhere
+            this.sendQueuedChunks();
+            /*
+            ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) this.chunkCoordIntPairQueue.poll();
 
             if (chunkcoordintpair != null) {
                 boolean flag1 = false;
@@ -227,6 +231,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                     }
                 }
             }
+            */
+            // Canyon end
         }
 
         if (this.E) {
@@ -268,6 +274,39 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         }
     }
 
+    // Canyon Start
+    public void sendQueuedChunks() {
+        ChunkCoordIntPair loopingChunkcoordintpair;
+        WorldServer worldserver = this.b.getWorldServer(this.dimension);
+        boolean maySend = com.canyonmodded.config.CanyonConfig.useNewNetworkingStack ||
+                this.netServerHandler.b() + ChunkCompressionThread.getPlayerQueueSize(this) < 4;
+        if (maySend) {
+            while ((loopingChunkcoordintpair = this.chunkSendQueue.poll()) != null) {
+                if (!chunkSendSemaphore.tryAcquire()) {
+                    // resend at a later time
+                    this.chunkSendQueue.add(loopingChunkcoordintpair);
+                    break;
+                }
+                final ChunkCoordIntPair chunkcoordintpair = loopingChunkcoordintpair;
+                worldserver.chunkProviderServer.getChunkAtAsync(chunkcoordintpair.x, chunkcoordintpair.z).thenRun(() -> {
+                    this.netServerHandler.sendPacket(new Packet51MapChunk(chunkcoordintpair.x * 16, 0, chunkcoordintpair.z * 16, 16, 128, 16, worldserver));
+                    List list = worldserver.getTileEntities(chunkcoordintpair.x * 16, 0, chunkcoordintpair.z * 16, chunkcoordintpair.x * 16 + 16, 128, chunkcoordintpair.z * 16 + 16);
+
+                    for (int j = 0; j < list.size(); ++j) {
+                        this.a((TileEntity) list.get(j));
+                    }
+                    chunkSendSemaphore.release();
+                });
+
+                // Old networking stack can only do one chunk packet at a time
+                if (!com.canyonmodded.config.CanyonConfig.useNewNetworkingStack) {
+                    break;
+                }
+            }
+        }
+    }
+    // Canyon End
+
     private void a(TileEntity tileentity) {
         if (tileentity != null) {
             Packet packet = tileentity.f();
diff --git a/src/main/java/net/minecraft/server/PlayerManager.java b/src/main/java/net/minecraft/server/PlayerManager.java
index 3dbb30d348c6a23c2a4c9ad1a600a043981adcbb..88a3e63f35dc453b6a8097a136773412ae635c08 100644
--- a/src/main/java/net/minecraft/server/PlayerManager.java
+++ b/src/main/java/net/minecraft/server/PlayerManager.java
@@ -154,6 +154,7 @@ public class PlayerManager {
                 entityplayer.d = entityplayer.locX;
                 entityplayer.e = entityplayer.locZ;
 
+                // Canyon start - improve sorting
                 // CraftBukkit start - send nearest chunks first
                 if (i1 > 1 || i1 < -1 || j1 > 1 || j1 < -1) {
                     final int x = i;
@@ -162,11 +163,13 @@ public class PlayerManager {
 
                     java.util.Collections.sort(chunksToSend, new java.util.Comparator<ChunkCoordIntPair>() {
                         public int compare(ChunkCoordIntPair a, ChunkCoordIntPair b) {
-                            return Math.max(Math.abs(a.x - x), Math.abs(a.z - z)) - Math.max(Math.abs(b.x - x), Math.abs(b.z - z));
+                            int pair1Dist = ((a.x - x) * (a.x - x)) + ((a.z - z) * (a.z - z));
+                            int pair2Dist = ((b.x - x) * (b.x - x)) + ((b.z - z) * (b.z - z));
+                            return Double.compare(pair1Dist, pair2Dist);
                         }
                     });
                 }
-                // CraftBukkit end
+                // Canyon end
             }
         }
     }
