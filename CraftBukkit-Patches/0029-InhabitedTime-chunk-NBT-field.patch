From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mintoyatsu <53593903+mintoyatsu@users.noreply.github.com>
Date: Sat, 18 Jul 2020 00:39:22 -0700
Subject: [PATCH] InhabitedTime chunk NBT field

Keeps track of how long (in ticks) chunks have been loaded by players.
This applies to all chunks within the player's render distance.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index e44b9378926704a2609277a41ead41304982fae1..bd6f9f1fb0492df251fecb1afccf2dfc0cfc28cc 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -27,6 +27,7 @@ public class Chunk {
     public boolean p;
     public boolean q;
     public long r;
+    public long inhabitedTime; // Canyon - the cumulative number of ticks players have been in this chunk
 
     public Chunk(World world, int i, int j) {
         this.tileEntities = new HashMap();
diff --git a/src/main/java/net/minecraft/server/ChunkLoader.java b/src/main/java/net/minecraft/server/ChunkLoader.java
index 7729ea5fde7ae4ee241ccbac88dafc9ad1daa5f9..47d7d248c42ff266d91af7b4764d4ebe58a21d6e 100644
--- a/src/main/java/net/minecraft/server/ChunkLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkLoader.java
@@ -125,6 +125,7 @@ public class ChunkLoader implements IChunkLoader {
         nbttagcompound.a("BlockLight", chunk.g.a);
         nbttagcompound.a("HeightMap", chunk.heightMap);
         nbttagcompound.a("TerrainPopulated", chunk.done);
+        nbttagcompound.setLong("InhabitedTime", chunk.inhabitedTime); // Canyon - the cumulative number of ticks players have been in this chunk
         chunk.q = false;
         NBTTagList nbttaglist = new NBTTagList();
 
@@ -172,6 +173,7 @@ public class ChunkLoader implements IChunkLoader {
         chunk.g = new NibbleArray(nbttagcompound.j("BlockLight"));
         chunk.heightMap = nbttagcompound.j("HeightMap");
         chunk.done = nbttagcompound.m("TerrainPopulated");
+        chunk.inhabitedTime = nbttagcompound.getLong("InhabitedTime"); // Canyon - the cumulative number of ticks players have been in this chunk
         if (!chunk.e.a()) {
             chunk.e = new NibbleArray(chunk.b.length);
         }
diff --git a/src/main/java/net/minecraft/server/PlayerInstance.java b/src/main/java/net/minecraft/server/PlayerInstance.java
index d32d70db700a896293bc58ccda2e923ee1888ff0..9f94bbda9351a9abed5847389e316c8a25afef5c 100644
--- a/src/main/java/net/minecraft/server/PlayerInstance.java
+++ b/src/main/java/net/minecraft/server/PlayerInstance.java
@@ -17,6 +17,7 @@ class PlayerInstance {
     private int k;
     private int l;
     private int m;
+    private long previousWorldTime; // Canyon - used when chunk InhabitedTime is being calculated
 
     final PlayerManager playerManager;
 
@@ -41,6 +42,12 @@ class PlayerInstance {
             }
             // CraftBukkit end
 
+            // Canyon start
+            if (this.b.isEmpty()) {
+                this.previousWorldTime = this.playerManager.a().getWorld().getFullTime();
+            }
+            // Canyon end
+
             this.b.add(entityplayer);
             entityplayer.chunkCoordIntPairQueue.add(this.location);
         }
@@ -52,6 +59,11 @@ class PlayerInstance {
             if (this.b.size() == 0) {
                 long i = (long) this.chunkX + 2147483647L | (long) this.chunkZ + 2147483647L << 32;
 
+                // Canyon start
+                this.increaseInhabitedTime();
+                PlayerManager.getChunkWatcherList(this.playerManager).remove(this);
+                // Canyon end
+
                 PlayerManager.a(this.playerManager).b(i);
                 if (this.dirtyCount > 0) {
                     PlayerManager.b(this.playerManager).remove(this);
@@ -189,4 +201,14 @@ class PlayerInstance {
             }
         }
     }
+
+    // Canyon start
+    public void increaseInhabitedTime() {
+        Chunk chunk = this.playerManager.a().getChunkAt(this.chunkX, this.chunkZ);
+        long time = this.playerManager.a().getWorld().getFullTime();
+
+        chunk.inhabitedTime += time - this.previousWorldTime;
+        this.previousWorldTime = time;
+    }
+    // Canyon end
 }
diff --git a/src/main/java/net/minecraft/server/PlayerManager.java b/src/main/java/net/minecraft/server/PlayerManager.java
index 88a3e63f35dc453b6a8097a136773412ae635c08..b6a5e11c8de1a4b4849216eccdf5eccbee60831d 100644
--- a/src/main/java/net/minecraft/server/PlayerManager.java
+++ b/src/main/java/net/minecraft/server/PlayerManager.java
@@ -12,6 +12,8 @@ public class PlayerManager {
     private int e;
     private int f;
     private final int[][] g = new int[][] { { 1, 0}, { 0, 1}, { -1, 0}, { 0, -1}};
+    private long previousTotalWorldTime; // Canyon - used to check if InhabitedTime should be calculated
+    private List playerInstanceList = new ArrayList(); // Canyon - used when chunk should be processed
 
     public PlayerManager(MinecraftServer minecraftserver, int i, int j) {
         if (j > 15) {
@@ -30,9 +32,24 @@ public class PlayerManager {
     }
 
     public void flush() {
-        for (int i = 0; i < this.c.size(); ++i) {
-            ((PlayerInstance) this.c.get(i)).a();
+        // Canyon start
+        long time = this.a().getWorld().getFullTime();
+        int i;
+
+        if (time - this.previousTotalWorldTime > 8000L) {
+            this.previousTotalWorldTime = time;
+
+            for (i = 0; i < this.playerInstanceList.size(); ++i) {
+                PlayerInstance instance = (PlayerInstance) this.playerInstanceList.get(i);
+                instance.a();
+                instance.increaseInhabitedTime();
+            }
+        } else {
+            for (i = 0; i < this.c.size(); ++i) {
+                ((PlayerInstance) this.c.get(i)).a();
+            }
         }
+        // Canyon end
 
         this.c.clear();
     }
@@ -44,6 +61,7 @@ public class PlayerManager {
         if (playerinstance == null && flag) {
             playerinstance = new PlayerInstance(this, i, j);
             this.b.a(k, playerinstance);
+            this.playerInstanceList.add(playerinstance); // Canyon - used when chunk should be processed for InhabitedTime
         }
 
         return playerinstance;
@@ -185,4 +203,10 @@ public class PlayerManager {
     static List b(PlayerManager playermanager) {
         return playermanager.c;
     }
+
+    // Canyon start
+    static List getChunkWatcherList(PlayerManager playermanager) {
+        return playermanager.playerInstanceList;
+    }
+    // Canyon end
 }
