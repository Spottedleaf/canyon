From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andrew Steinborn <git@steinborn.me>
Date: Thu, 22 Aug 2019 00:38:54 -0400
Subject: [PATCH] Backport: Improve server tick loop and implement tps api

This patch was backported from Paper 1.14.4 to Canyon. The original
author of the patch in Paper is Aikar.

This patch provides a more stable server tick loop that is not affected
by changes in the system time. In addition, it is intended to keep the
server at 20 TPS unless it can not realistically do so. This patch also
allows Canyon to keep track of server TPS, which can be viewed with the
/tps command.

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 59358fbd5deb235d18495ae196a285fd1a3dac29..af953dd7167505bfdcb11f204bccc590f89161dc 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -63,6 +63,87 @@ public class MinecraftServer implements Runnable, ICommandListener {
     public static int currentTick;
     // CraftBukkit end
 
+    // Canyon start - improved server tick loop and TPS monitoring
+    // Sourced from Paper
+    public static final int TPS = 20;
+    public static final int TICK_TIME = 1000000000 / TPS;
+
+    public static final class TPSTracker {
+
+        private final java.util.ArrayDeque<TickRecord> ticks = new java.util.ArrayDeque<>();
+        private final long window;
+
+        private long sumDuration;
+        private long sumTickToTick;
+
+        public TPSTracker(final long windowNS) {
+            this.window = windowNS;
+        }
+
+        public void addTick(final long tickStart, final long tickEnd) {
+            TickRecord first;
+            while ((first = this.ticks.peekFirst()) != null) {
+                // only remove data completely out of window
+                if ((tickStart - first.tickEnd) <= this.window) {
+                    break;
+                }
+                this.ticks.pollFirst();
+                this.sumDuration -= first.getDuration();
+                this.sumTickToTick -= first.tickToTickDiff;
+            }
+
+            final TickRecord last = this.ticks.peekLast();
+
+            final long duration = tickEnd - tickStart;
+            final long tickToTickDiff = last != null ? (tickStart - last.tickStart) : (Math.max(TICK_TIME, duration));
+
+            final TickRecord tick = new TickRecord(tickStart, tickEnd, tickToTickDiff);
+
+            this.ticks.addLast(tick);
+            this.sumDuration += duration;
+            this.sumTickToTick += tickToTickDiff;
+        }
+
+        public double getMSPT() {
+            final int ticks = this.ticks.size();
+            if (ticks == 0) {
+                return 0.0;
+            }
+
+            return ((double)this.sumDuration / (double)ticks) * (1.0E3 / 1.0E9);
+        }
+
+        public double getTps() {
+            final int ticks = this.ticks.size();
+            if (ticks == 0) {
+                return 20.0;
+            }
+
+            return ((double)ticks / (double)this.sumTickToTick) * (1.0E9 / 1.0);
+        }
+    }
+    public static final class TickRecord {
+        public final long tickStart;
+        public final long tickEnd;
+        public final long tickToTickDiff;
+
+        public TickRecord(final long tickStart, final long tickEnd, final long tickToTickDiff) {
+            this.tickStart = tickStart;
+            this.tickEnd = tickEnd;
+            this.tickToTickDiff = tickToTickDiff;
+        }
+
+        public long getDuration() {
+            return this.tickEnd - this.tickStart;
+        }
+    }
+    public final TPSTracker tps5s = new TPSTracker(java.util.concurrent.TimeUnit.SECONDS.toNanos(5L));
+    public final TPSTracker tps15s = new TPSTracker(java.util.concurrent.TimeUnit.SECONDS.toNanos(15L));
+    public final TPSTracker tps1 = new TPSTracker(java.util.concurrent.TimeUnit.MINUTES.toNanos(1L));
+    public final TPSTracker tps5 = new TPSTracker(java.util.concurrent.TimeUnit.MINUTES.toNanos(5L));
+    public final TPSTracker tps15 = new TPSTracker(java.util.concurrent.TimeUnit.MINUTES.toNanos(15L));
+    // Canyon end
+
     public MinecraftServer(OptionSet options) { // CraftBukkit - adds argument OptionSet
         new ThreadSleepForever(this);
 
@@ -339,11 +420,142 @@ public class MinecraftServer implements Runnable, ICommandListener {
         this.isRunning = false;
     }
 
+    // Canyon start - improve server tick loop
+    /**
+     * A Schedule is an object that can be used to maintain a periodic schedule for an event of interest.
+     */
+    public final class Schedule {
+
+        private long lastPeriod;
+
+        /**
+         * Initialises a schedule with the provided period.
+         * @param firstPeriod The last time an event of interest occurred.
+         * @see #setLastPeriod(long)
+         */
+        public Schedule(final long firstPeriod) {
+            this.lastPeriod = firstPeriod;
+        }
+
+        /**
+         * Updates the last period to the specified value. This call sets the last "time" the event
+         * of interest took place at. Thus, the value returned by {@link #getDeadline(long)} is
+         * the provided time plus the period length provided to {@code getDeadline}.
+         * @param value The value to set the last period to.
+         */
+        public void setLastPeriod(final long value) {
+            this.lastPeriod = value;
+        }
+
+        /**
+         * Returns the last time the event of interest should have taken place.
+         */
+        public long getLastPeriod() {
+            return this.lastPeriod;
+        }
+
+        /**
+         * Returns the number of times the event of interest should have taken place between the last
+         * period and the provided time given the period between each event.
+         * @param periodLength The length of the period between events in ns.
+         * @param time The provided time.
+         */
+        public int getPeriodsAhead(final long periodLength, final long time) {
+            final long difference = time - this.lastPeriod;
+            final int ret = (int)(Math.abs(difference) / periodLength);
+            return difference >= 0 ? ret : -ret;
+        }
+
+        /**
+         * Returns the next starting deadline for the event of interest to take place,
+         * given the provided period length.
+         * @param periodLength The provided period length.
+         */
+        public long getDeadline(final long periodLength) {
+            return this.lastPeriod + periodLength;
+        }
+
+        /**
+         * Adjusts the last period so that the next starting deadline returned is the next period specified,
+         * given the provided period length.
+         * @param nextPeriod The specified next starting deadline.
+         * @param periodLength The specified period length.
+         */
+        public void setNextPeriod(final long nextPeriod, final long periodLength) {
+            this.lastPeriod = nextPeriod - periodLength;
+        }
+
+        /**
+         * Increases the last period by the specified number of periods and period length.
+         * The specified number of periods may be < 0, in which case the last period
+         * will decrease.
+         * @param periods The specified number of periods.
+         * @param periodLength The specified period length.
+         */
+        public void advanceBy(final int periods, final long periodLength) {
+            this.lastPeriod += (long)periods * periodLength;
+        }
+
+        /**
+         * Sets the last period so that it is the specified number of periods ahead
+         * given the specified time and period length.
+         * @param periodsToBeAhead Specified number of periods to be ahead by.
+         * @param periodLength The specified period length.
+         * @param time The specified time.
+         */
+        public void setPeriodsAhead(final int periodsToBeAhead, final long periodLength, final long time) {
+            final int periodsAhead = this.getPeriodsAhead(periodLength, time);
+            final int periodsToAdd = periodsToBeAhead - periodsAhead;
+
+            this.lastPeriod -= (long)periodsToAdd * periodLength;
+        }
+    }
+
+    public static long getGreatestTime(final long t1, final long t2) {
+        final long diff = t1 - t2;
+        return diff < 0L ? t2 : t1;
+    }
+    // Canyon end - improve server tick loop
+
     public void run() {
         try {
             if (this.init()) {
-                long i = System.currentTimeMillis();
+                // Canyon Start - Improve server tick loop
+                long start = System.nanoTime(), curTime, wait;
+                Schedule tickSchedule = new Schedule(start - TICK_TIME);
+                long scheduledTickStart = tickSchedule.getDeadline(TICK_TIME); // should be == start
 
+                while (this.isRunning) {
+                    // time to start early, currently set to 0L as I don't see any issues with this on Folia
+                    long parkLeniency = 0L;
+                    do {
+                        curTime = System.nanoTime();
+                        // Paper start - Further improve server tick loop
+                        wait = scheduledTickStart - curTime;
+
+                        if (wait > parkLeniency) {
+                            boolean interrupted = Thread.interrupted();
+                            java.util.concurrent.locks.LockSupport.parkNanos(wait);
+                            if (interrupted) {
+                                Thread.currentThread().interrupt();
+                            }
+                        }
+                    } while (wait > parkLeniency);
+
+                    final long tickStart = curTime;
+
+                    int tickCount = Math.max(1, tickSchedule.getPeriodsAhead(TICK_TIME, curTime));
+
+                    this.h();
+                    final long tickEnd = System.nanoTime();
+                    tickSchedule.advanceBy(tickCount, TICK_TIME);
+                    scheduledTickStart = getGreatestTime(System.nanoTime(), tickSchedule.getDeadline(TICK_TIME));
+                    this.tps5s.addTick(tickStart, tickEnd);
+                    this.tps15s.addTick(tickStart, tickEnd);
+                    this.tps1.addTick(tickStart, tickEnd);
+                    this.tps5.addTick(tickStart, tickEnd);
+                    this.tps15.addTick(tickStart, tickEnd);
+                }/*
                 for (long j = 0L; this.isRunning; Thread.sleep(1L)) {
                     long k = System.currentTimeMillis();
                     long l = k - i;
@@ -370,7 +582,8 @@ public class MinecraftServer implements Runnable, ICommandListener {
                             this.h();
                         }
                     }
-                }
+                }*/
+                // Canyon end
             } else {
                 while (this.isRunning) {
                     this.b();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 93f7f1f19d28961b469d8aed0825ef7c530f1122..adf2a7e88e0ee469201645a592f506e43a9e2d2b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit;
 
 import java.io.FileNotFoundException;
+
 import org.bukkit.generator.ChunkGenerator;
 import com.avaje.ebean.config.DataSourceConfig;
 import com.avaje.ebean.config.ServerConfig;
@@ -807,6 +808,13 @@ public final class CraftServer implements Server {
         return result;
     }
 
+    // Canyon start
+    public double[] getTPS() {
+        // forbidden secret tps: 5s, 15s
+        return new double[] { console.tps1.getTps(), console.tps5.getTps(), console.tps15.getTps(), console.tps5s.getTps(), console.tps15s.getTps() };
+    }
+    // Canyon end
+
     public void setWhitelist(boolean value) {
         server.o = value;
         console.propertyManager.b("white-list", value);
